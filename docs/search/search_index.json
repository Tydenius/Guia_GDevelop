{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Conceitos B\u00e1sicos de Desenvolvimento","text":""},{"location":"#criando-um-novo-projeto","title":"Criando um Novo Projeto","text":"<ul> <li> <p>Ap\u00f3s abrir o GDevelop, iremos come\u00e7ar um novo projeto em branco clicando no bot\u00e3o Create Blank Project na p\u00e1gina inicial: </p> </li> <li> <p>Na tela de Novo Projeto, devemos dar um nome para o mesmo (1), e selecionar o diret\u00f3rio onde ele ficar\u00e1 salvo (2). Ap\u00f3s isso, clique no bot\u00e3o Create Project (3), ent\u00e3o GDevelop ir\u00e1 preparar o ambiente de desenvolvimento. </p> </li> </ul>"},{"location":"#entendendo-a-hud-do-gdevelop","title":"Entendendo a HUD do GDevelop","text":"<ul> <li> <p>Ap\u00f3s o t\u00e9rmino da cria\u00e7\u00e3o do projeto, teremos uma tela inicial similar a abaixo. Segue uma breve descri\u00e7\u00e3o de cada \u00e1rea.</p> <p></p> <ul> <li> <p>1 - Menu de Propriedades do Projeto: Aqui configuramos diversas propriedades do projeto, como cenas, tamanho da Tela, Vari\u00e1veis Globais, defini\u00e7\u00f5es de publica\u00e7\u00e3o, etc.</p> </li> <li> <p>2 - Abas do Projeto: Nesta \u00e1rea n\u00f3s somos capazes de trocar entre os cen\u00e1rios do nosso projeto, assim como dos Eventos. Cada cena criada possui uma aba de Eventos atrelada nela como padr\u00e3o.</p> </li> <li> <p>3 - Teste e Publica\u00e7\u00e3o do Projeto: O Bot\u00e3o Preview permite que executemos nosso projeto sem necessidade de public\u00e1-lo ou construir um execut\u00e1vel para o mesmo. J\u00e1 o Bot\u00e3o Publish \u00e9 onde iremos preparar todos os arquivos do projeto para public\u00e1-lo e permitir que outras pessoas possam jog\u00e1-lo</p> </li> <li> <p>4 - Menu de Edi\u00e7\u00e3o da Tela: Estes bot\u00f5es s\u00e3o respons\u00e1veis por abrir diversas telas que utilizamos no GDevelop, como a Tela de Propriedades (5), ou a tela de Objetos (7). Al\u00e9m disso, possui bot\u00f5es para desfazer e refazer altera\u00e7\u00f5es no projeto, configurar a tela de fundo, adicionar uma grade, Zoom, etc.</p> </li> <li> <p>5 - Tela de Propriedades: Esta tela apresenta todas as propriedades de uma inst\u00e2ncia de um objeto selecionado da cena, como posi\u00e7\u00e3o, tamanho, entre outros, Podemos editar todas essas informa\u00e7\u00f5es a partir desta tela.</p> </li> <li> <p>6 - Cena: Aqui temos a nossa \u00e1rea de cria\u00e7\u00e3o, ou a Cena propriamente dita. \u00c9 nesta regi\u00e3o em que n\u00f3s efetivamente constru\u00edmos o mundo, adicionando inst\u00e2ncias de objetos e organizando-os como queremos. Altera\u00e7\u00f5es feitas na Tela de Propriedades s\u00e3o tamb\u00e9m refletidas aqui.</p> </li> <li> <p>7 - Tela de Objetos: Aqui n\u00f3s temos uma lista de todos os objetos que criamos em nosso projeto, podendo selecion\u00e1-los para adicionar uma nova inst\u00e2ncia dele na cena, ou alterar suas propriedades, como imagem, vari\u00e1veis e comportamentos.</p> </li> <li> <p>8 - Tela de Camadas: Esta tela mostra as diversas camadas do nosso Projeto. Camadas s\u00e3o importantes para organizar as Inst\u00e2ncias de Objetos do nosso projeto.</p> </li> </ul> <p>N\u00f3s iremos nos aprofundar em cada uma destas se\u00e7\u00f5es do GDevelop com o avan\u00e7ar deste tutorial, mas agora que temos uma ideia b\u00e1sica de cada uma delas, podemos come\u00e7ar a navegar pela Engine para criarmos nosso projeto efetivamente.</p> </li> </ul>"},{"location":"#criando-o-primeiro-objeto","title":"Criando o Primeiro Objeto","text":"<ul> <li>Para efetivamente criarmos nosso jogo, precisamos trabalhar com Objetos. As propriedades de um Objeto s\u00e3o definidas pelo seu Tipo. O tipo mais comum de objeto utilizado em um projeto no GDevelop \u00e9 o Sprite, e este ser\u00e1 o que utilizaremos primeiro.</li> </ul> <ul> <li> <p>Ap\u00f3s clicar na Op\u00e7\u00e3o Sprite, surgir\u00e1 a Tela de Propriedade do Sprite. Nela n\u00f3s podemos definir todos os dados principais do objeto, como seu nome, anima\u00e7\u00f5es, suas vari\u00e1veis e comportamentos.</p> <p>Antes de definirmos as propriedades mais avan\u00e7adas do nosso sprite, precisamos definir seu nome e sua imagem. Em Object Name, digite o nome desejado para seu Sprite, lembrando que este nome deve ser algo que caracterize este objeto, como por exemplo \u201cHer\u00f3i\u201d ou um nome pr\u00f3prio. Ap\u00f3s isso, n\u00f3s devemos clicar no bot\u00e3o Add an Animation para colocar uma imagem no Sprite.</p> </li> </ul> <p></p> <ul> <li> <p>Ao clicar em Add Animation, teremos na tela nossa Animation #0 (1), que ser\u00e1 a primeira inst\u00e2ncia de imagem do nosso Objeto.     Um Sprite trabalha com anima\u00e7\u00f5es, que s\u00e3o formadas por uma sequ\u00eancia de imagens que geram um determinado movimento de uma a\u00e7\u00e3o. Exemplos de anima\u00e7\u00f5es mais comuns que um Sprite possui s\u00e3o a de estado parado(Idle), e em movimento(Walk/Run), mas para cada a\u00e7\u00e3o que nosso Sprite pode realizar, podemos ter uma anima\u00e7\u00e3o que ir\u00e1 ser utilizada em conjunto para representar o movimento do Sprite realizando esta a\u00e7\u00e3o.</p> </li> <li> <p>Caso voc\u00ea queira adicionar mais anima\u00e7\u00f5es no seu Sprite, basta clicar em + Add an Animation (2), e uma nova linha de Anima\u00e7\u00e3o ir\u00e1 aparecer.</p> </li> </ul> <p></p> <ul> <li> <p>Para adicionar uma ou mais imagens em uma anima\u00e7\u00e3o, voc\u00ea pode clicar em + Add e selecionar as imagens que deseja utilizar de um diret\u00f3rio. Alternativamente, podemos utilizar o Piskel para inserir e fazer edi\u00e7\u00f5es melhores em nossas imagens da anima\u00e7\u00e3o, utilizando o Bot\u00e3o Edit with Piskel, o qual veremos como utilizar mais a frente.</p> </li> <li> <p>Al\u00e9m do Piskel, n\u00f3s temos o bot\u00e3o Preview, onde podemos ver como a nossa sequ\u00eancia de imagens est\u00e1 funcionando para criar a anima\u00e7\u00e3o em quest\u00e3o. Dentro da tela de preview, n\u00f3s teremos a tela da anima\u00e7\u00e3o rodando (1), e abaixo as configura\u00e7\u00f5es de velocidade da anima\u00e7\u00e3o (2). Nas configura\u00e7\u00f5es de velocidade, n\u00f3s temos dois valores: o FPS(Frames per Second), que indica quantos quadros nossa anima\u00e7\u00e3o anda por em um segundo de execu\u00e7\u00e3o, e ao seu lado n\u00f3s temos o tempo de execu\u00e7\u00e3o da anima\u00e7\u00e3o. </p> <p>Estes valores est\u00e3o sempre conectados, de tal forma que quanto maior for nosso valor de FPS, menor ser\u00e1 o tempo de execu\u00e7\u00e3o da anima\u00e7\u00e3o, e vice-versa. Logo, para anima\u00e7\u00f5es mais simples, o ideal \u00e9 termos uma taxa de FPS menor para ela, para alcan\u00e7ar um tempo de execu\u00e7\u00e3o melhor desta anima\u00e7\u00e3o.</p> <p>O GDevelop ir\u00e1 tentar otimizar estes valores de acordo com a quantidade de quadros que colocarmos, mas em alguns casos podemos sempre alterar estes valores.</p> </li> </ul> <p></p> <ul> <li>Finalizando, ap\u00f3s a parte de Preview, n\u00f3s temos uma op\u00e7\u00e3o chamada Loop. Esta fun\u00e7\u00e3o ir\u00e1 fazer com que a anima\u00e7\u00e3o em quest\u00e3o fique em repeti\u00e7\u00e3o infinita. O Loop \u00e9 especialmente \u00fatil quando fazemos anima\u00e7\u00f5es de movimento.</li> </ul> <p></p> <ul> <li> <p>Ap\u00f3s criarmos nossas anima\u00e7\u00f5es, n\u00f3s devemos verificar duas partes do nosso Sprite para que ele funcione de forma correta em nosso projeto: as M\u00e1scaras de Colis\u00e3o, e os Pontos.</p> <p>N\u00f3s podemos editar ambos utilizando seus respectivos bot\u00f5es no canto inferior esquerdo da tela do Objeto, como mostrado na imagem abaixo.</p> </li> </ul> <p></p>"},{"location":"#mascaras-de-colisao","title":"M\u00e1scaras de Colis\u00e3o","text":"<ul> <li> <p>M\u00e1scaras de Colis\u00e3o representam a parte \u201cf\u00edsica\u201d do seu Sprite. Dentro do GDevelop, toda a interpreta\u00e7\u00e3o de contato entre dois ou mais objetos \u00e9 dada atrav\u00e9s da colis\u00e3o de suas m\u00e1scaras. Ela \u00e9, de forma simplificada, a \u201cPele\u201d do Sprite.</p> <p>Dado isto, \u00e9 importante arrumar a m\u00e1scara de Colis\u00e3o para que ela cubra nosso Sprite o mais justo poss\u00edvel, para evitar que colis\u00f5es aconte\u00e7am de forma err\u00f4nea.</p> </li> </ul> <p> </p> <p>No Exemplo A, podemos ver que a m\u00e1scara de colis\u00e3o est\u00e1 pegando toda nossa imagem. Por\u00e9m, existem elementos nela, como a poeira e a arma, que n\u00e3o fazem parte do \u201cCorpo\u201d do nosso personagem. Sendo assim, o ideal \u00e9 ajustar nossa m\u00e1scara  para que ela cubra somente o que \u00e9 realmente o \u201cCorpo\u201d do personagem, assim como o Exemplo B.</p> <ul> <li>No GDevelop, para editarmos a m\u00e1scara padr\u00e3o de colis\u00e3o, precisamos clicar no bot\u00e3o Use a Custom collision mask dentro da tela de edi\u00e7\u00e3o de colis\u00f5es.</li> </ul> <p></p> <p>Ap\u00f3s criarmos uma colis\u00e3o personalizada, podemos ajust\u00e1-la de forma simples arrastando seus pontos ao redor da regi\u00e3o em que queremos. Caso seja necess\u00e1rio mais pontos para ajustar a m\u00e1scara, basta clicar no bot\u00e3o Add a Vertex, que um novo ponto surgir\u00e1 no topo esquerdo da imagem.</p> <p></p> <ul> <li>De forma padr\u00e3o, o GDevelop altera a m\u00e1scara de colis\u00e3o de TODAS as anima\u00e7\u00f5es e seus respectivos frames juntos. Caso seja necess\u00e1rio termos m\u00e1scaras distintas entre anima\u00e7\u00f5es, ou entre frames, precisamos desativar os ajustes autom\u00e1ticos de anima\u00e7\u00e3o (1) e frames (2):</li> </ul> <p></p>"},{"location":"#pontos","title":"Pontos","text":"<ul> <li>Pontos s\u00e3o refer\u00eancias de um espa\u00e7o dentro de uma  imagem. Assim como m\u00e1scaras de colis\u00e3o, podemos utilizar pontos para calcular a colis\u00e3o entre objetos, e tamb\u00e9m para determinar a posi\u00e7\u00e3o de um objeto numa cena. Por padr\u00e3o, um Sprite possui dois Pontos: O Ponto de Origem (1), que determina o espa\u00e7o inicial de onde a imagem do Sprite vai surgir (0,0), e o ponto Central (2), que fica automaticamente centralizado no Sprite.</li> </ul> <ul> <li>A edi\u00e7\u00e3o de pontos \u00e9 muito similar ao de m\u00e1scaras de colis\u00e3o, e todos os pontos s\u00e3o por padr\u00e3o existentes em todas as anima\u00e7\u00f5es e frames de um Sprite, mas podemos mudar isso caso seja necess\u00e1rio tamb\u00e9m.</li> </ul>"},{"location":"#comportamentos","title":"Comportamentos","text":"<ul> <li> <p>Com o b\u00e1sico de um Objeto criado, agora vamos dar uma olhada em uma das partes mais importantes da programa\u00e7\u00e3o No-Code no GDevelop: Behaviors, ou Comportamentos. Para adicionar um novo comportamento, basta irmos na aba Behavior dentro das op\u00e7\u00f5es do Objeto, e clicar em +Add Behavior.</p> <p></p> <p>Cada tipo de Objeto possui seus comportamentos, e voc\u00ea \u00e9 capaz de adicionar m\u00faltiplos comportamentos em um mesmo objeto para acessar suas funcionalidades. Aqui iremos explicar os tipos de comportamentos mais comuns que iremos utilizados num projeto:</p> <ul> <li> <p>Platform faz com que o objeto seja marcado como uma plataforma s\u00f3lida no qual outros objetos podem andar sobre.</p> </li> <li> <p>Platform Character \u00e9 o comportamento ideal para um Objeto que ter\u00e1 movimento em um jogo Plataforma, como Mario. Ele tamb\u00e9m atribui F\u00edsica ao objeto, fazendo-o cair na falta de uma plataforma, pular, subir um objeto que seja uma escada, ter uma velocidade e acelera\u00e7\u00e3o de movimento, etc.</p> </li> <li> <p>Anchor faz com que um objeto fique fixado em uma posi\u00e7\u00e3o da tela, independente do movimento da mesma. \u00c9 um comportamento interessante para criar a Interface do seu jogo.</p> </li> <li> <p>Destroy when outside of the screen \u00e9 \u00fatil para limparmos alguns tipos de objetos ap\u00f3s ele sair da nossa \u00e1rea de vis\u00e3o do jogo, como proj\u00e9teis.</p> </li> </ul> <p></p> </li> <li> <p>Ap\u00f3s selecionar seu comportamento, ele exibir\u00e1 op\u00e7\u00f5es que podem ser ajustadas de acordo com a sua necessidade. O comportamento de Platform Character permite que voc\u00ea ajuste todas as velocidades do Objeto em movimento, se o movimento dele ser\u00e1 feito atrav\u00e9s dos controles padr\u00f5es da ferramenta, entre outras fun\u00e7\u00f5es.</p> </li> </ul>"},{"location":"#variaveis","title":"Vari\u00e1veis","text":"<ul> <li> <p>Vari\u00e1veis s\u00e3o utilizadas para criar atributos modific\u00e1veis em um objeto ou no projeto. Quando criamos uma vari\u00e1vel em um objeto, ela ser\u00e1 utilizada para definir alguma caracter\u00edstica deste objeto que pode ser modificada durante o jogo. Um exemplo pr\u00e1tico para isto \u00e9 a Vida de um Personagem. Quando criamos uma vari\u00e1vel para o projeto, o que chamamos de Vari\u00e1vel Global, ela \u00e9 utilizada para armazenar alguma informa\u00e7\u00e3o que ser\u00e1 reutilizada em v\u00e1rias cenas e momentos do nosso projeto, como por exemplo uma pontua\u00e7\u00e3o.</p> </li> <li> <p>Para criar uma vari\u00e1vel em um Objeto, basta irmos na aba Variables (1) dentro da edi\u00e7\u00e3o do objeto, e clicar no bot\u00e3o Add a Variable (2), como na imagem abaixo:</p> </li> </ul> <p></p> <ul> <li> <p>Ao criar uma vari\u00e1vel, temos que definir alguns par\u00e2metros da mesma:</p> <ul> <li>Nome: Um nome que ir\u00e1 identificar esta vari\u00e1vel. Quando trabalhos com vari\u00e1veis de objetos, estes podem possuir vari\u00e1veis com nomes iguais entre eles. Por exemplo, um objeto Personagem e um objeto Inimigo podem possuir uma vari\u00e1vel Vida com valores diferentes.</li> <li>Tipo: Uma vari\u00e1vel precisa ter um tipo definido, o que ir\u00e1 ditar o que ela poder\u00e1 armazenar dentro dela. S\u00e3o estes tipos:<ul> <li>String: Capaz de armazenar textos;</li> <li>Number: Capaz de armazenar valores num\u00e9ricos;</li> <li>Boolean: Armazena um valor de True ou False para l\u00f3gicas booleanas;</li> <li>Array: Armazena um conjunto de valores dentro dele, separados pela sua posi\u00e7\u00e3o dentro da lista numericamente.</li> <li>Structure: Armazena um conjunto de vari\u00e1veis dentro dele.</li> </ul> </li> <li>Valor Inicial: Define um valor inicial para esta vari\u00e1vel.</li> </ul> </li> <li> <p>Para criar uma vari\u00e1vel global, temos que ir nas propriedades do Projeto, clicando no bot\u00e3o no canto superior esquerdo do projeto e, em seguida, clicar no bot\u00e3o Global Variables (2)  que est\u00e1 dentro da aba Game Settings (1). as defini\u00e7\u00f5es de uma vari\u00e1vel global s\u00e3o os mesmo para uma vari\u00e1vel de um objeto.</p> </li> </ul> <p> </p>"},{"location":"#adicionando-objetos-na-cena","title":"Adicionando Objetos na Cena","text":"<ul> <li> <p>Ap\u00f3s criarmos nosso objeto, ele ficar\u00e1 na aba Objetos do nosso projeto, por\u00e9m para adicionarmos ele na nossa Cena atual, \u00e9 necess\u00e1rio criar Inst\u00e2ncias do mesmo nela.</p> </li> <li> <p>Para criar uma Inst\u00e2ncia de um Objeto, basta clicar e arrastar o objeto com o mouse, posicionando-o em algum lugar dentro da cena. Uma mesma cena pode possuir m\u00faltiplas inst\u00e2ncias de um objeto</p> </li> <li> <p>Cada Cena possui seus objetos de forma independente, mas voc\u00ea pode reutilizar objetos j\u00e1 criados de uma cena para outra se voc\u00ea tornar o mesmo Global. Para isso, basta clicar com bot\u00e3o direito no Objeto, e selecionar a op\u00e7\u00e3o Set as Global Object.</p> </li> <li> <p>Ap\u00f3s adicionar uma inst\u00e2ncia de um objeto em uma Cena, voc\u00ea poder\u00e1 ajustar seus par\u00e2metros de cena, como tamanho e posi\u00e7\u00e3o, na aba de Par\u00e2metros, localizada no canto esquerdo do GDevelop, como exibido no in\u00edcio deste tutorial.</p> </li> </ul>"},{"location":"#camadas","title":"Camadas","text":"<ul> <li> <p>As inst\u00e2ncias de um objeto ficam todas dentro de uma camada quando adicionadas numa cena. Por padr\u00e3o, o GDevelop possui a camada Base Layer, por\u00e9m podemos criar mais camadas para melhor dividir as inst\u00e2ncias dentro de uma cena.</p> </li> <li> <p>O uso de camadas \u00e9 importante para determinar a ordem em que os objetos est\u00e3o sobrepostos um do outro. Na aba de Camadas, o que determinar esta sobreposi\u00e7\u00e3o \u00e9 a ordem das camadas, com a primeira camada sendo a que estar\u00e1 mais ao \u201ctopo\u201d das sobreposi\u00e7\u00f5es</p> <p>Se criarmos, por exemplo, uma camada Fundo, e uma camada Interface, podemos organizar nossas inst\u00e2ncias de objetos entre essas camadas, colocando objetos do cen\u00e1rio e de fundo na camada Fundo, que ficar\u00e1 por \u00faltimo na ordem de camadas, e objetos como Barra de Vida, Pontua\u00e7\u00e3o, na camada Interface, que ficar\u00e1 em primeiro na ordem de camadas, com a camada Base Layer entre elas, com objetos como Personagens, Inimigos, plataformas e colet\u00e1veis. * Para criar uma camada, basta clicar no bot\u00e3o Add a Layer na Tela de Camadas, e para alternar suas ordens basta clicar no \u00edcone ao lado esquerdo do nome da camada e arrast\u00e1-lo para a posi\u00e7\u00e3o desejada. Lembre de colocar um nome para as camadas criadas. * Caso deseje esconder uma camada, basta clicar no \u00edcone de olho no canto direito da camada, e para apagar uma camada, clique no \u00edcone de lixeira da mesma.</p> </li> </ul>"},{"location":"#eventos","title":"Eventos","text":"<ul> <li> <p>Al\u00e9m de trabalhar com objetos, a outra parte importante para criar um projeto no GDevelop consiste em trabalhar com Eventos. Um Evento consiste de uma Condi\u00e7\u00e3o, que \u00e9 um requisito para o evento, e de uma A\u00e7\u00e3o, que \u00e9 a execu\u00e7\u00e3o de uma fun\u00e7\u00e3o dentro do evento.</p> </li> <li> <p>Para criarmos estes eventos, devemos ir para a aba de Eventos da cena em que estamos trabalhando. Cada cena possui seus pr\u00f3prios eventos, por\u00e9m tamb\u00e9m podemos criar eventos externos a cenas que podem ser utilizados em m\u00faltiplas cenas ao serem chamados.</p> </li> <li> <p>Ao entrar numa aba de eventos, para criar um primeiro evento basta clicar no bot\u00e3o Add a Event (1) no centro da tela, que ent\u00e3o ir\u00e1 criar uma linha de evento no topo da tela. Tamb\u00e9m temos um bot\u00e3o de adicionar um novo evento no fim da nossa sequ\u00eancia de eventos (2)</p> </li> <li> <p>Ap\u00f3s criar uma linha evento, para adicionar uma condi\u00e7\u00e3o basta clicar em Add a condition (3) na parte esquerda do evento, e para adicionar uma a\u00e7\u00e3o, clicar em Add an action (4) na parte direita.</p> <p>Um evento pode ter m\u00faltiplas condi\u00e7\u00f5es e a\u00e7\u00f5es. Para um evento ser executado, todas suas condi\u00e7\u00f5es devem acontecer, e isto far\u00e1 que todas suas a\u00e7\u00f5es sejam executadas na ordem em que est\u00e3o.</p> </li> </ul> <p></p> <ul> <li>Ao clicar para adicionar uma condi\u00e7\u00e3o ou a\u00e7\u00e3o, teremos que escolher quem ou o que ir\u00e1 gerar estes. Podemos selecionar um objeto criado (1), ou uma propriedade do projeto (2) para gerar as condi\u00e7\u00f5es e a\u00e7\u00f5es. Ao selecionar a origem, podemos configurar par\u00e2metros espec\u00edficos desta condi\u00e7\u00e3o ou a\u00e7\u00e3o, caso possuam (3). Por fim, basta clicar em Ok para concluir a cria\u00e7\u00e3o.</li> </ul> <p></p>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Com estas no\u00e7\u00f5es, voc\u00ea est\u00e1 pronto para come\u00e7ar a criar seu primeiro projeto usando o GDevelop.  Lembre sempre de tirar d\u00favidas e sugest\u00f5es com os professores, e tamb\u00e9m de conversar com seus companheiros para ter novas ideias para o projeto, afinal o trabalho em equipe \u00e9 essencial.</p> <p>DIVIRTAM-SE!!!! \ud83d\ude04</p>"}]}